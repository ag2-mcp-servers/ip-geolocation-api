# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T17:09:20+00:00



import argparse
import json
import os
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity
from fastapi import Query

app = MCPProxy(
    contact={},
    description="BigDataCloud's IP Geolocation API returns detailed information about the geographical location, ownership and connectivity of the provided IPv4 IP address.\n\nThis API is powered by patent-pending â€˜Next Generation IP Geolocation Technology'. As a result, the API has sub-millisecond response time.\n\nYou can authenticate the API with the use of API keys provided in your BigDataCloud account.\n\nBigDataCloud provides 10K Free queries per month. You can upgrade your package with $2/month per 10K additional queries.\n\nThe API has Unprecedented Update Rate\n- Geolocation data re-evaluated every 2 hours or at least once a day\n- BGP data updated every 2 hours\n- Registry data updated at least once a day\n- Country object data usually updates at least once in a month \n\nYou can learn more about the API at [bigdatacloud.com](https://www.bigdatacloud.com/ip-geolocation-apis).",
    title='IP Geolocation API',
    version='1.0.0',
    servers=[{'url': 'https://api.bigdatacloud.net'}],
)


@app.get(
    '/data/ip-geolocation-full',
    description=""" This API returns additional security hazard report in addition to confidence area and locality information. """,
    tags=['ip_geolocation_services'],
)
def ip_geolocation_with_confidence_area_and_hazard_report_api(
    ip: Optional[str] = None,
    locality_language: Optional[str] = Query(None, alias='localityLanguage'),
    key: Optional[str] = None,
):
    """
    IP Geolocation with Confidence Area and Hazard Report API
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/data/ip-geolocation-with-confidence',
    description=""" Returns list of geocoordinates which represents estimated geolocation confidence area. """,
    tags=['ip_geolocation_services'],
)
def ip_geolocation_with_confidence_area_api(
    ip: Optional[str] = None,
    locality_language: Optional[str] = Query(None, alias='localityLanguage'),
    key: Optional[str] = None,
):
    """
    IP Geolocation with Confidence Area API
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
